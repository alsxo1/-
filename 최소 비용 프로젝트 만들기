import heapq

def min_merge_cost(k, file_sizes):
    # 최소 힙을 생성하고 파일 크기를 모두 추가합니다.
    heapq.heapify(file_sizes)
    
    total_cost = 0  # 총 비용을 저장할 변수 초기화
    
    while len(file_sizes) > 1:  # 힙에 파일이 하나만 남을 때까지 반복
        # 가장 작은 두 파일 크기를 꺼냅니다.
        first = heapq.heappop(file_sizes)
        second = heapq.heappop(file_sizes)
        
        # 병합 비용을 계산하고 누적합니다.
        cost = first + second
        total_cost += cost
        
        # 병합한 파일을 다시 힙에 넣습니다.
        heapq.heappush(file_sizes, cost)
    
    return total_cost  # 총 병합 비용 반환

# 입력 처리
k = int(input())  # 파일의 갯수를 입력받음
file_sizes = list(map(int, input().split()))  # 각 파일의 크기를 입력받아 리스트로 저장

# 결과 출력
print(min_merge_cost(k, file_sizes))  # 최소 병합 비용을 계산하여 출력
